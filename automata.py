# Author: Antonio Lang
# Date: 25 February 2023

import random

class AutomatonNode:
    def __init__(self, state, next=[None]) -> None:
        self.state = state
        self.next = next
    def __str__(self) -> str:
        return f"State {self.state}, next node list: {self.next}"

def create_automata(option) -> AutomatonNode: 
    # automata to recognize the following languages
    if option == 1: # baa+
        q3 = AutomatonNode("accept", [("",)])
        q2 = AutomatonNode("valid", [("a", q3)])
        q2.next.append(("a", q2))
        q1 = AutomatonNode("valid", [("a", q2)])
        q0 = AutomatonNode("valid", [("b", q1)])
        return q0
    if option == 2: # (abba)+ or (baab)+
        return
    if option == 3: # zero through ninety-nine 
        return

def generate_language(automata) -> str:
    # returns an utterance generated by the automaton
    utterance = []
    node = automata
    while node.state != "accept":
        utterance.append(node.next[0][0])
        node = random.choice(node.next)[1]
    return ''.join(utterance)

def recognize_language(automata, utterance) -> int:
    return int(determine_valid_word(automata, utterance, 0))

def determine_valid_word(automaton_node, utterance, chars_read):
    if automaton_node.state == "accept" and chars_read == len(utterance):
        return True
    elif len(utterance) == chars_read and automaton_node.state != "accept":
        return False
    else:
        valid_chars = [char[0] for char in automaton_node.next]
        if utterance[chars_read] in valid_chars:
            for nodes in automaton_node.next:
                return False or determine_valid_word(nodes[1], 
                                                    utterance, chars_read+1)
        else:
            return False

if __name__ == '__main__':
    baa_automaton = create_automata(1)
    # print(generate_language(baa_automaton))
    print(recognize_language(baa_automaton, "baa"))